name: custom

on:
  push:
    tags:
      - 'v*'
    branches:
      # - main
      - release
  workflow_dispatch:
          inputs:
              buildos:
                  description: 'os version to build this image with.'
                  type: choice
                  required: true
                  default: ''
                  options:
                      - 'macos-12'
                      - 'windows'
                      - 'linux-amd64'
                      - 'linux-arm64'
jobs:
  # Linux x86 assets built using the container based build
  build-linux-amd64:
    # if: ${{github.event.inputs.buildos == 'linux-amd64'}}
    environment: release
    runs-on: ubuntu-latest
    env:
      DOCKER_ORG: ${{ vars.DOCKER_USER }}
      OLLAMA_SKIP_MANIFEST_CREATE: '1'
      BUILD_ARCH: amd64
      PUSH: '1'
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set Version
        shell: bash
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USER }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
      - run: |
          ./scripts/build_linux.sh
          ./scripts/build_docker.sh
      - uses: actions/upload-artifact@v4
        with:
          name: dist-linux-amd64
          path: |
            dist/*linux*
            !dist/*-cov

  # Linux ARM assets built using the container based build
  # (at present, docker isn't pre-installed on arm ubunutu images)
  build-linux-arm64:
    # if: ${{github.event.inputs.buildos == 'linux-arm64'}}
    environment: release
    runs-on: ubuntu-latest
    env:
      DOCKER_ORG: ${{ vars.DOCKER_USER }}
      OLLAMA_SKIP_MANIFEST_CREATE: '1'
      BUILD_ARCH: arm64
      PUSH: '1'
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set Version
        shell: bash
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV
      - name: 'Install Docker'
        run: |
          # Add Docker's official GPG key:
          env
          uname -a
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc

          # Add the repository to Apt sources:
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          sudo usermod -aG docker $USER
          sudo apt-get install acl
          sudo setfacl --modify user:$USER:rw /var/run/docker.sock
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USER }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
      - run: |
          ./scripts/build_linux.sh
          ./scripts/build_docker.sh
      - uses: actions/upload-artifact@v4
        with:
          name: dist-linux-arm64
          path: |
            dist/*linux*
            !dist/*-cov

  # Aggregate all the assets and ship a release
  release:
    needs:
      # - build-darwin
      # - build-windows
      - build-linux-amd64
      # - build-linux-arm64
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: write
    env:
      DOCKER_ORG: ${{ vars.DOCKER_USER }}
      OLLAMA_SKIP_IMAGE_BUILD: '1'
      PUSH: '1'
    steps:
      - uses: actions/checkout@v4
      - name: Set Version
        shell: bash
        run: |
          echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=$(echo ${GITHUB_REF_NAME} | cut -f1 -d-)" >> $GITHUB_ENV
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USER }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
      - run: ./scripts/build_docker.sh
      - name: Retrieve built artifact
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: dist-*
          merge-multiple: true
      - run: |
          ls -lh dist/
          (cd dist; sha256sum * > sha256sum.txt)
          cat dist/sha256sum.txt
      # - uses: ncipollo/release-action@v1
      #   with:
      #     name: ${{ env.RELEASE_VERSION }}
      #     allowUpdates: true
      #     artifacts: 'dist/*'
      #     draft: true
      #     prerelease: true
      #     omitBodyDuringUpdate: true
      #     generateReleaseNotes: true
      #     omitDraftDuringUpdate: true
      #     omitPrereleaseDuringUpdate: true
      #     replacesArtifacts: true
